// notes
// temp variables for each socket is evaluated before code generation
// input sockets dont need temp vars, only output sockets do
// 

class MultiplyNode : public NodeModel
{
	public:

	void initAfterLoad()
	{
		this->addSlot(new Vector3Slot());
	}

	// create var names, etc
	void preProcess(ShaderContext* ctx)
	{

	}

	QString generateCode(ShaderContext* ctx, int socketIndex)
	{
		QString valA = getValueFromSocket(0);
		QString valB = getValueFromSocket(1);
		QString res = getSocketVarName(2);
		QString code = res +" = " + valA + " = " + valB + ";";
		ctx->addShaderChunk(node);
	}	
};


class NodeModel
{
	public:
	QString getValueFromSocket(int index)
	{
		auto sock = sockets[index];
		if (sock->hasConnection()) {
			return sock->getConnectedSocket()->getVariableName();
		}

		return sock->getDefaultValue();
	}
}

class NodeSocketModel
{
	public:

}


class ShaderEvaluator
{
	public:
	QString evalShader(ShaderGraph* graph)
	{
		// generate variable names
		generateProperties();

		// 
	}

	// generate temp var name for each socket
	void generateProperties()
	{
		// for each node
			// for each socket
				// generate properties for sockets
	}
}